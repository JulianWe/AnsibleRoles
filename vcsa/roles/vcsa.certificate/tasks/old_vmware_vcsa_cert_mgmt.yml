# author:
#   - 'Marc Wappler (D060655)'
# contributers:
#   - 'Raimund Kunath (D060689)'
#   - 'Dominik Buchner (VMware)'
#
# examples:
#   - 'ansible-playbook -i "netbox vpod av qa-de-1a" playbook/vmware/vmware_vcsa_cert_mgmt.yml --vault-id vmware@prompt --vault-id ad@prompt'
---
- hosts: vcenters
  remote_user: root
  gather_facts: False
  vars_files:
    - "{{ playbook_dir }}/../../vault/vmware.yml"
    - "{{ playbook_dir }}/../../vault/ad.yml"
  vars:
    site: "{{ inventory_hostname.split('.')[2] | lower }}"
    domain: "{{ inventory_hostname | adsite('fqdn') }}"
    digicert_url: https://cacerts.digicert.com/
    root_ca_file: DigiCertGlobalRootCA.crt
    interm_ca_file: DigiCertSHA2SecureServerCA.crt
    snapshot: ansible_vcsa_certificate_change
    datacenter: "{{ hostvars[inventory_hostname]['datacenter'] }}"
    files:
      - "{{ inventory_hostname }}.pem"
      - "{{ inventory_hostname }}-key.pem"
    ansible_ssh_pass: "{{ users['vcenter']['ssh_run_password'] }}"

  tasks:
    - name: create vcsa snapshot before certificate change action
      vmware_guest_snapshot:
        hostname: "{{ inventory_hostname }}"
        username: "{{ compute[domain]['username'] }}@{{ domain }}"
        password: "{{ compute[domain]['password'] }}"
        validate_certs: no
        datacenter: "{{ datacenter }}"
        folder: "/{{ datacenter }}/vm/"
        name: "{{ inventory_hostname }}"
        state: present
        snapshot_name: "{{ snapshot }}"
        description: "change machine SSL/TLS certificates for {{ inventory_hostname }} - ansible automation"
      delegate_to: 127.0.0.1

    - name: get root ca certificates from digicert
      get_url:
        url: "{{ digicert_url }}{{ item }}"
        dest: /tmp/
        timeout: 20
        validate_certs: yes
      loop:
        - "{{ root_ca_file }}"
        - "{{ interm_ca_file }}"
      delegate_to: 127.0.0.1

    - name: convert root ca certificates from crt to pem format
      shell: "openssl x509 -inform der -outform pem -in {{ item }} -out {{ item.split('.')[0] }}.pem"
      args:
        chdir: /tmp/
      loop:
        - "{{ interm_ca_file }}"
        - "{{ root_ca_file }}"
      register: openssl_results
      delegate_to: 127.0.0.1

    - name: check if certificate conversion was successful
      fail:
        msg: "RC: {{ item.rc }} ({{ item.cmd }})"
      when: item.rc != 0
      loop: "{{ openssl_results.results }}"

    - name: get server certificate from GitHub
      github_files:
        action: get_file
        repo: cc/secrets
        file_path: "{{ site }}/certificates/{{ item }}"
        github_server: github.wdf.sap.corp
        user: "{{ users['security_patching']['username'] }}"
        token: "{{ users['security_patching']['token'] }}"
      register: cert_files
      loop: "{{ files }}"
      delegate_to: 127.0.0.1

    - name: copy vcsa server certificate to appliance
      copy:
        content: "{{ item.file_content | b64decode }}"
        dest: "/tmp/{{ item.item }}"
      loop: "{{ cert_files.results }}"

    - name: copy root ca certificates to appliance
      copy:
        src: "/tmp/{{ item }}"
        dest: "/tmp/{{ item }}"
      loop:
        - "{{ interm_ca_file.split('.')[0] }}.pem"
        - "{{ root_ca_file.split('.')[0] }}.pem"

    - name: stop all vcsa services and start services required for cert exchange
      shell: "{{ item }}"
      args:
        executable: /usr/bin/bash
      loop:
        - service-control --stop --all
        - service-control --start vmafdd
        - service-control --start vmdird
        - service-control --start vmcad
      register: stop_op
      async: 1800
      poll: 5

    - name: services successfully stopped?
      fail:
        msg: "RC: {{ item.rc }} ({{ item.cmd }})"
      when: item.rc != 0
      loop: "{{ stop_op.results }}"

    - name: import root ca certificates
      shell: "/usr/lib/vmware-vmafd/bin/dir-cli trustedcert publish --cert /tmp/{{ item }} --password {{ users['vcenter']['run_password'] }}"
      args:
        chdir: /usr/lib/vmware-vmafd/bin/
        executable: /usr/bin/bash
      no_log: True
      loop:
        - "{{ root_ca_file.split('.')[0] }}.pem"
        - "{{ interm_ca_file.split('.')[0] }}.pem"

    - name: force vecs-cli vmdir refresh
      shell: "./vecs-cli force-refresh"
      args:
        chdir: /usr/lib/vmware-vmafd/bin/
        executable: /usr/bin/bash

    - name: wait 180 sec for services to acknowledge cert store changes
      wait_for:
        timeout: 180

    - name: delete old machine ssl certificate store
      shell: ./vecs-cli entry delete --store MACHINE_SSL_CERT --alias __MACHINE_CERT -y
      args:
        executable: /usr/bin/bash
        chdir: /usr/lib/vmware-vmafd/bin/

    - name: apply new machine ssl certificate and recreate store
      shell: "./vecs-cli entry create --store MACHINE_SSL_CERT --alias __MACHINE_CERT --cert /tmp/{{ files[0] }} --key /tmp/{{ files[1] }}"
      args:
        executable: /usr/bin/bash
        chdir: /usr/lib/vmware-vmafd/bin/

    - name: wait 180 sec for services to acknowledge cert store changes
      wait_for:
        timeout: 180

    - name: restart vcsa services
      command: service-control --start --all
      async: 1800
      poll: 20

    - name: restart vami service to apply new cert
      command: systemctl restart vami-lighttp
      async: 180
      poll: 5

    - import_tasks: tasks/vmware_vcsa_cert_mgmt_ls.yml
      vars:
        lookup_url: https://localhost/lookupservice/sdk
        datacenter: "{{ datacenter }}"

    - name: 240 sec delay for service check
      wait_for:
        timeout: 240

    - name: test services and remove snapshot
      block:
        - include_tasks: tasks/vmware_vcsa_vmon_health.yml
          vars:
            vcenter: "{{ inventory_hostname }}"
            user: "{{ compute[ domain ]['username'] }}@{{ domain }}"
            password: "{{ compute[ domain ]['password'] }}"
            service_check: # list vmon services to check
              - vsphere-ui
              - vpxd

        - name: remove vcsa snapshot to cleanup
          vmware_guest_snapshot:
            hostname: "{{ inventory_hostname }}"
            username: "{{ compute[ domain ]['username'] }}@{{ domain }}"
            password: "{{ compute[ domain ]['password'] }}"
            datacenter: "{{ datacenter }}"
            folder: "/{{ datacenter }}/vm/"
            name: "{{ inventory_hostname }}"
            snapshot_name: "{{ snapshot }}"
            state: absent
          delegate_to: 127.0.0.1
